name: Swift

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      # Install dependencies
      - name: Install dependencies
        run: |
           gem install cocoapods
           pod install

      # Archive build
      - name: Build Archive 
        run: |
          xcodebuild -workspace DemoSwiftUI.xcworkspace \
                     -scheme DemoSwiftUI \
                     -sdk iphoneos \
                     -configuration Release \
                     -archivePath $RUNNER_TEMP/DemoSwiftUI.xcarchive \
                     archive

      # Verify archive creation
      - name: Verify Archive Exists
        run: ls $RUNNER_TEMP/DemoSwiftUI.xcarchive

      # Export IPA
      - name: Export IPA
        run: |
           xcodebuild -exportArchive \
                     -archivePath $RUNNER_TEMP/DemoSwiftUI.xcarchive \
                     -exportOptionsPlist ExportOptions.plist \
                     -exportPath $RUNNER_TEMP

      # Verify IPA Exists
      - name: Verify IPA Exists
        run: ls -la $RUNNER_TEMP/DemoSwiftUI.ipa

      # Set IPA path for reuse
      - name: Set IPA Path
        id: ipa_path
        run: echo "IPA_PATH=$RUNNER_TEMP/DemoSwiftUI.ipa" >> $GITHUB_ENV

      # Upload IPA as Artifact
      - name: Upload IPA as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: DemoSwiftUI-ipa
          path: ${{ env.IPA_PATH }}

      # Clean up keychain and provisioning profile
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

      # Clear IPA Path variable
      - name: Clear IPA Path Variable
        run: echo "IPA_PATH=" >> $GITHUB_ENV
